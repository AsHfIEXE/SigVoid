name: SigVoid CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Use a fresh Ubuntu runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3 # Use v3 for actions/checkout

    - name: Set up Python
      uses: actions/setup-python@v4 # Use v4 for actions/setup-python
      with:
        python-version: '3.9' # Specify a Python version compatible with your project

    - name: Create requirements.txt for CI
      # This is a workaround since your run.sh installs dependencies directly.
      # For CI, it's best to have a requirements.txt file.
      # This step ensures all necessary Python packages are available for installation.
      run: |
        echo "fastapi" > requirements.txt
        echo "uvicorn" >> requirements.txt
        echo "pyserial" >> requirements.txt
        echo "aiohttp" >> requirements.txt
        echo "aiosqlite" >> requirements.txt
        echo "python-socketio" >> requirements.txt
        echo "python-engineio" >> requirements.txt
        # Add any other Python dependencies if your project uses them (e.g., python-dotenv)
        # echo "python-dotenv" >> requirements.txt

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v3 # Use v3 for actions/setup-node
      with:
        node-version: '18' # Or a specific version like '16.x' or '20.x' that works with Tailwind

    - name: Install global Node.js packages (Tailwind CSS)
      run: npm install -g tailwindcss

    - name: Build Tailwind CSS
      # Ensure frontend/static/input.css exists and is correctly structured
      run: npx tailwindcss -i frontend/static/input.css -o frontend/static/styles.css --minify

    - name: Setup OUI Database for CI
      # Replicate the OUI database creation logic from run.sh
      # This is crucial because the backend needs oui.db for vendor lookups.
      run: |
        mkdir -p backend/database
        python3 - <<EOF
import sqlite3
import re
import os

db_path = "backend/database/oui.db"
os.makedirs(os.path.dirname(db_path), exist_ok=True)
conn = sqlite3.connect(db_path)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS oui (oui TEXT PRIMARY KEY, vendor TEXT)")
# Insert a dummy OUI entry to ensure the database is functional for basic tests
cursor.execute("INSERT OR IGNORE INTO oui (oui, vendor) VALUES (?, ?)", ("000000", "CI Dummy Vendor"))
conn.commit()
conn.close()
print("OUI database created successfully for CI environment.")
EOF
      env:
        PYTHONUNBUFFERED: "1" # Ensures Python output is unbuffered in CI logs

    - name: Run Python syntax checks and basic backend import test
      # This step verifies that Python files are syntactically correct
      # and that the main FastAPI application can be imported without crashing.
      # For a more robust CI, you would add unit tests here (e.g., using pytest).
      run: |
        # Check Python syntax for all backend files
        python -m py_compile backend/alerts.py
        python -m py_compile backend/analyzer.py
        python -m py_compile backend/cleanup.py
        python -m py_compile backend/exporter.py
        python -m py_compile backend/main.py
        python -m py_compile backend/serial_reader.py
        python -m py_compile backend/database/database.py
        
        # Test if FastAPI app can be imported (implies dependencies are met and basic syntax is OK)
        python -c "import backend.main; print('FastAPI app imported successfully for CI.')"
        
